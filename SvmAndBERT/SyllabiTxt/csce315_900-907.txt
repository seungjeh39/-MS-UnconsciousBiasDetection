syllabus: 22 spring csce 315 900 -907: programming studio syllabus programming studio it is estimated that windows xp has 50,000,000 lines of code. the average mobile phone has over 10 million lines of code. the average developer writes 10 – 20 useful lines of code per day, so a couple of engineers and 2 friend s could break away, start a new company, and create a new “windows” operating system in only about 1700 years . that’s not reasonable. up until now, most of the programs that you have been asked to write could probably fit in your mind. when you complete th e letter, you fold it, seal it up, and mail it off (or hit send). but now it is plain to see that products that you use daily simply could not be recreated by you and 10 of your best friends in an afternoon, weekend, or semester. a 1700 -year project is wil dly unreasonable. there must be a better way. in this course, you will learn a better way. you will dive into the world of software engineering and hone your teamwork (and, yes, coding) skills. effective teamwork is essential, and software design methodolo gies make development more efficient. this course gives you very practical skills for being an effective member of a development team and producing high -quality, sustainable software. learning these methods of working together, managing requirements, produ cing quality software products, and testing, delivering, and maintaining these products is every bit as valuable as coding. why i teach this course this course is offers you a unique learning experience. i am always especially excited to teach this course, and here is why: building software is fun and rewarding you get many opportunities to “learn by doing” there’s more to software than just coding you get a taste of software engineering working on teams can be messy, but it’s worth it it is am azing what you can accomplish together, so much more than on your own course information course number: 315 course title: programming studio credit hours: 3 (2 lecture hours, 2 lab hours) syllabus: 22 spring csce 315 900 -907: programming studio lecture: sections 900 -903: face -to-face, mondays, wednesdays , and fridays 9:10 am - 10:00 am, zachr y engineerin g education com plex (https://a ggiemap.tamu.edu/?bld g=0518) 244 sections 904 -907: face -to-face, mondays, wednesdays, and fridays 10:20 am - 11:10 am, zachr y engineeri ng education complex (https://a ggiemap.tamu.edu/?bld g=0518) 244 lab: section 900: face -to-face, tuesdays and thursdays 8:25am -9:15am, zachr y engineerin g education complex (https://a ggiemap.tamu.edu/?bld g=0518) 584 section 901: face -to-face, tuesdays and thursdays 9:35am -10:25am, zachr y engineerin g educa tion complex (https://a ggiemap.tamu.edu/?bld g=0518) 584 section 902: face -to-face, tuesdays and thursdays 11:35am -12:25pm, zachr y engineerin g education complex (https://a ggiemap.tamu.edu/?bld g=0518) 584 section 903: face -to-face, tuesdays and thursdays 12:40pm -1:30pm, zachr y engineerin g education complex (https://a ggiemap.tamu.edu/?bld g=0518) 584 section 90 4: face -to-face, tuesdays and thursdays 8:25am -9:15am, zachr y engineerin g education complex (https://a ggiemap.tamu.edu/?bld g=0518) 596 section 905 : face -to-face, tuesdays and thursdays 9:35am -10:25am, zachr y engineerin g educa tion complex (https://a ggiemap.tamu.edu/?bld g=0518) 596 section 906 : face -to-face, tuesdays and thursdays 11:35am -12:25pm, zachr y engineerin g education complex (https://a ggiemap.tamu.edu/?bld g=0518) 596 section 907 : face -to-face, tuesdays and thursdays 12:40pm -1:30pm, zachr y engineerin g education complex (https://a ggiemap.tamu.edu/?bld g=0518) 596 final exam schedule (https://re gistrar.tamu.edu/courses ,-registration ,- schedulin g/finalexamination -schedules#0 -sprin g2022) : final project demonstrations will happen during the scheduled time for your class lecture and lab. be prepared to attend both final sections. instr uctor details instructor: robert lightfoot office: 422 peterson syllabus: 22 spring csce 315 900 -907: programming studio phone: 979 -845-2611 e-mail: use canvas email for all class questions. for help, copy instructor and ta. help/office hours: email for appointment teaching assistants  shuaifang wang and her email is wangshuaifang@tamu.edu .  thomas rost and his email is thomas.rost.99@tamu.edu .  hayden roper and his email is haydenroper@tamu.edu .  robert hinck and his email is rob.hinck@tamu.edu . course description intensive programming experience that integrates core concepts in comp uter science and familiarizes with a variety of programming/development tools and techniques; students work on 2 or 3 month -long projects each emphasizing a different specialization within computer science; focuses on programming techniques to ease code in tegration, reusability, and clarity. course prerequisites csce 312 and csce 314; or csce 350/ecen 350 corequisite: csce 313 special course designation w (writing intensive course) as a writing intensive course, you will receive instruction on writi ng and complete writing assignments so you can master writing related to the major. you must pass the writing components with a c or better to earn a grade in the course. course learning outcomes this course is intended to be an intensive programming e xperience that integrates core concepts in computer science and familiarizes you with a variety of programming/development tools and techniques. you will primarily work in small teams on projects emphasizing different specializations syllabus: 22 spring csce 315 900 -907: programming studio within computer scienc e. the course focuses on honing good programming techniques to ease code integration, reuse, and clarity. the primary goal for this class is for you to emerge with strong programming skills, able to address both individual and team programming challenges c ompetently. in this course, you will improve your programming skills through significant practice. after this course you will be able to: explain the need for software engineering through industry examples and personal experience exercise the fundamental concepts of software construction (including managing requirements, design, implementation, testing, and deployment) design and develop software that is clearer, more maintainable, and integrates current software technologies collaborate and communicate effectively in small teams recognize and apply characteristics of effective technical writing we will cover many topics including: software system design for portability, performance, and testability coding layout and style considerations programming spe cifications and documentation use of basic software tools and apis subject -specific topics related to the team projects (db, hci) though many topics will overlap, this course is not intended to be as in -depth or comprehensive as a standard software enginee ring course. for a deeper understanding of software development and project management, take software engineering after completing this class. required textbooks code complete , 2nd edition (https:// go.oreill y.com/tamu/librar y/view/ -/0735619670/?ar) by steve mcconnell (microsoft press, 2004). (code complete pdf) (http://aroma.vn/web/wp -content/uploads/2016/11/code -complete -2nd- editionv413hav.pdf) database desi gn, 2nd edition (https://opentextbc.ca/dbdesi gn01/) by adrienne watt (bccampus open education, 2014). (database desi gn pdf) (https://opentextbc.ca/dbdesi gn01/open/download?t ype=pdf) other supplementary material as needed will be supplied electronically. syllabus: 22 spring csce 315 900 -907: programming studio grading policy grading components: your grade for this course reflects your mastery of course material and is determined by multiple components. as a writing course, you must pass the writing components with a c or better to earn a grade in the course. failur e to pass the writing components with a c or better results in an f for the course. team projects – 40%: two major projects, each worth 20% of the course grade, for 40% total. specific grading practices for each project will be announced when that project is given out. your individual contribution determined from logged code commits, peer evaluation, and instructor/ta observations will be a significant contributing factor to these project grades. individual project – 5%: the individual project will be compl eted prior to the team projects. specific grading practices will be announced when the assignment is given out. written elements – 35%: this is a writing intensive course. you are required to pass this component with a c or better to earn a grade in the co urse. you will have several written assignments within the projects (roughly 10% from the individual project, 12% from the first team project, and 13% from the second team project). specific grading practices will be announced when each assignment is given out. other course activities – 20%: the course has several different types of activities to help you better understand concepts and connect with the material. this includes (but is not limited to) athome activities, in -class activities, and lab activities . these activities bring deeper, longer -term learning as you work, either individually or with other students. for submitted assignments, grading will be based on the quality of the submitted work. for group assignments, your full participation is required to receive a grade for that assignment . this component will be divided as follows: 10% in -class activities (lowest grade dropped), 5% lab activities (lowest grade dropped), 3% at -home activities, and 2% in -class knowledge checks (lowest two grades dropped ). grading scale: grades will be assigned according to the following scale: a >= 90 > b >= 80 > c >= 70 > d >= 60 > f these grades represent varying degrees of achi evement (see the universit y's gradin g system (https://re gistrar.tamu.edu/transcripts -grades/grades#0 -gradin gsystem) ): a = excellent, b = good, c = satisfactory, d = passing, f = failing stacked honors section: the stacked honors section will explore course concepts more deeply through readings, discussions, reflections, and projects. they will have honors -only lecture sessions on the first friday of each month. syllabus: 22 spring csce 315 900 -907: programming studio submission of assignments: all assignments will be turned in electronically though canvas (https://canvas.tamu.edu/) (unless otherwise specified) by the due date and time given on the assignment. email submissions will not be accepted. late work policy assignments turned in after the posted deadline will have a penalty applied of 5% per day late. for team assignments, the late penalty affects the grade for the entire team. if the assignment is individual, the late penalty only affects the grade for that team member. course schedule the course is listed as a 2 -hour per week lecture, a nd 2-hour per week lab, however it has been intentionally scheduled for 3 hours per week of lecture (along with the lab). we will meet approximately 2/3 of the lecture periods over the course of the semester. after the first week of class, the regular sect ions will only meet on mondays and wednesdays with fridays reserved as optional workdays. the honors section will also meet the first friday of each month for deep dive discussions. below is the planned but tentative schedule of topics and major projects f or the course. all assignment and project details will be communicated on canvas (https://canvas.tamu.edu/) . week lecture topics lab topics project deliverables (due monday midnight at beginning of week unless otherwise noted) 1 introductions, professional presence no labs 2 software construction and design html, javascript, css, using git 3 software development methodologies, waterfall html, javascript, css project 1 version 1 4 databases, team success database design diagrams, aws databa se interaction project 1 version 2 syllabus: 22 spring csce 315 900 -907: programming studio 5 code as communication, style guides, technical writing database population project 2 phase 1 6 collaborative development, formal inspections project 2 demos, connecting database and gui project 2 phase 2, project 2 status update* (due wed. midnight) 7 testing/debugging/refactoring project 2 demos project 2 phase 3 8 commenting and project 2 demos, user project 2 phase 4, project 2 automatically generated documentation, agile stories retrospective reports* (due wed. midnight) spring break 9 design thinking and ideation apis, sprint artifacts project 3 proposal* (due sun. midnight at end of week) 10 user studies, prototyping full stack development, advanced git 11 accessibility, integration and configuration ma nagement user studies project 3 sprint 1 materials* (due wed. midnight) 12 workdays workdays project 3 user study 1, project 3 status update* (due wed. midnight) 13 team meetings team meetings project 3 sprint 2 materials* (due wed. midnight) 14 workday s workdays project 3 user study 2 15 course wrap -up, final presentation instructions no labs project 3 sprint materials, project 3 retrospective reports* (due wed. midnight) finals project 3 final presentations university and course policies syllabus: 22 spring csce 315 900 -907: programming studio 