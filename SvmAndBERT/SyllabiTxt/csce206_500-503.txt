syllabus csce 206 structured programming in c sections 500 - 503 spring 2022 instructor ki hwan yum office: 216 peterson phone: email: yum at cse dot tamu dot edu office hours: m 11:00 am – 12:00 pm, r 1:00 pm – 2:00 pm, or by appointment zoom link: https://tamu.zoom.us/j/492102794 lectures: mwf 12:40 pm – 1:30 pm zach 350 zoom link: https://tamu.zoom.us/j/819004246 labs: section 500 mw 8:00 am – 8:50 am zach 598 section 501 mw 9:10 am – 10:00 am zach 598 section 502 mw 10:20 am – 11:10 am zach 598 section 503 mw 11:30 am – 12:20 pm zach 598 teaching assistants trevor bolton office hours: tr 11:00 am – 12:30 pm eabc (enter through lobby, find the whiteboard with ta names to find which cubicle he is in) email: tbolton2000 at tamu dot edu peer teachers section 500 sofia ortega (s dot ortega at tamu dot edu) section 501 sofia ortega section 502 noel john section 503 hunter baker visit https://engineering.tamu.edu/cse/academics/peer-teachers/current-peer-teachers.html for detailed information course description : this course addresses principles of computer science including algorithm development, programming techniques, language features, and methods of documentation. students will be introduced (in detail) to the “c” programming language. required text : a. kelly and c. pohl, c by dissection, 4th ed., pearson, 2001. https://www.facultybookshelf.org/course/24497 attendance policy : attendance at all lectures is required to ensure that each student is abreast of the informational content of the class and becomes aware of any changes to the tentative class exam, quiz, and assignment schedules as noted later in this document. absence from a lecture is not a valid excuse to be misinformed about any class activity and the student maintains the responsibility for all course content. attendance at lectures/labs will constitute 5% of your final grade. scholastic dishonesty : scholastic dishonesty will not be tolerated in any form. working together on programming assignments can be a meaningful and real-world learning experience, but the final product submitted for a grade must be the work of the individual student submitting the material. examinations are meant to measure the knowledge of individual students and offering to, or receiving any assistance from, a student that subverts this process will not be tolerated. any identified incident of scholastic dishonesty will be dealt with severely and consequences may include a zero grade for the activity, course failure or dismissal from the university among others. grading policy: course grading 1 midterm 15% 5 programming assignments 30% attendance 5% final exam 20% 5 homeworks 20% 5 quizzes 10% exams: midterm: wednesday, march 2, 2022 . final: tba. only with an officially approved university authorized absence will any exam makeup be considered. prior arrangements with the instructor must be made when feasible and official verification of circumstances necessitating the absence will be required. one midterm and one comprehensive final will be given during the semester. note that exams are extremely important. if you miss an exam (e.g. midterm), your final grade will be an ‘f’. assignments : programming assignment grades will cumulatively represent 30% of your final grade. programming assignments should be submitted on or before the due date. programming assignment grades will lose 25% for each day after the due date. assignments will require use of standard programming style conventions and documentation which will be illustrated in lab and lecture examples. final grades: final grades will be assigned as follows: 90-100 a 80-89 b 70-79 c 60-69 d below 60 f this scale may be adjusted by the instructor to reflect score variations. lecture topics 1. ansi c programs, lexical elements and operators k&p ch 1, 2 2. flow of control and functions k&p ch 3, 4 3. character processing, and fundamental data types k&p ch 5, 6 4. file i/o and review k&p ch 13 5. pointers, arrays, and strings k&p ch 8, 9, 10 6. structures, and linked lists k&p ch 12 chapter objectives and outcomes after having read and studied the following chapters you should be able to: chap 1: create, edit, compile and execute an introductory c program. describe the use of c variables, expressions and data assignments. describe the creation and use of pre-processor commands (#define, #include). distinguish the use of printf and scanf for program i/o. describe the use of the while statement. demonstrate appropriate use of chapter topics via student written code. chap 2: describe the characters and lexical elements of the c language. describe the need and the syntax necessary for program comments. identify c language tokens including; reserved words, identifiers, constants, operators and punctuators. describe operator precedence and associativity and their impact. describe the use of increment, decrement, and assignment operators. demonstrate the appropriate use of chapter topics via student written code. chap 3: name and describe the use of relational, equality and logical operators. name and describe the use of and need for conditional statements including: if, if-else, switch, and nested-if. name and describe the use of and need for looping statements including: while, for, dowhile. name and describe the use of and need for the break and continue statements. demonstrate the appropriate use of chapter topics via student written code. chap 4: describe the benefit and need for the structured approach to programming using c functions. describe the format of a c function. describe the need for and use of the return statement. describe the need for and the use of function prototypes. describe effective approaches to efficient design of programming projects. describe function invocation and data transmission via call-by-value. demonstrate the appropriate use of chapter topics via student written code. chap 5: describe the need for and the use of the data type char. describe the use of char i/o commands getchar() and putchar(). name the char header file containing useful char macros. demonstrate the appropriate use of chapter topics via student written code. chap 6: name the c fundamental data types. name the integral data types and data valid for such types. name the floating data types and data valid for such types. describe the syntax and use of the sizeof operator. name the c math functions referenced and how access is achieved. describe the syntax and use for c casts and type conversions. demonstrate the appropriate use of chapter topics via student written code. chap 8: describe the declaration and use of pointer variables. describe the syntax and use for the dereference operator. describe the need for pointer variables to implement call-by-reference. describe the concept of variable scope and its impact on variable accessibility. name the storage classes studied and their impact on variable scope and extent. demonstrate the appropriate use of chapter topics via student written code. chap 9. describe the need for and the declaration of single-dimension arrays. describe the relationship between arrays and pointers in c. describe pointer arithmetic and its use with array element access. describe the syntax and need for passing arrays to a function. describe the need for and the declaration of multi-dimension arrays. describe the needed syntax and the benefit of dynamic memory allocation. demonstrate appropriate use of chapter topics via student written code. chap. 10 describe the need for and the declaration of string data. describe the process of accessing string data through pointers. name and describe the use for string handling functions available in the standard library. demonstrate the appropriate use of chapter topics via student written code. chap. 11 describe the concept of recursion and how it is implanted in c. demonstrate the appropriate use of recursion with student written code. chap. 12 describe the need for and the declaration of c structures. describe the syntax needed to access a structure member. describe the declaration of and need for an array of structures. describe the characteristic of a self-referential structure. describe the need for and the creation of a liner linked-list. demonstrate the appropriate use of chapter topics with student written code. chap 13 describe the need for and the creation of files for data input and output. describe the syntax necessary to gain access to an existing file or create a new one. describe the use of and syntax required for the fprintf() and fscanf() functions. demonstrate the appropriate use of chapter topics with student written code