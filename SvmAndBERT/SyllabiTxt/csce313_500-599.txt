csce 313 – introduction to computer systems spring 2022 course logistics 1. time and place a. lecture s (online -asynchronous ): canvas modules b. labs (in-person) : various (refer to howdy for your section) 2. course content: canvas ( https://canvas.tamu.edu/courses/137772 ) 3. course discussion forum : ms teams : team - csce -313 sp22. 4. instructor : aakash tyagi, tyagi@cse.tamu.edu a. office hours : will be posted on canvas and teams 5. teaching staff: role : graduate ta’s and undergraduate peer teachers will conduct the labs and qna . undergraduate ta’s will work behind the scene on lab content creation and qna . graders will take the frontline role in grading the programming assignments and quiz/exams . a. graduate ta’s i. gabriel stella gabrielrstella@tamu.edu ii. feras khemakhem foufou1560@tamu.edu iii. mary julian mjulian@tamu.edu b. undergraduate ta’s i. ezekiel blevins ezeb209@tamu.edu ii. sravan sriram ssravan360@tamu.edu c. peer teachers (listed on peer teachers central site ) 6. a baseline r0 version of the course master plan is made available on canvas. although some amount of buffer planning has been buil t-in to the schedule, we will respond to situation ‘on the ground’ and respond as dictated by the over -arching goal of maximizing learning and assimilation. prerequisites • csce 312 (computer organization) • familiarity with c/c++ programming (csce 121, csce 221) description the objective of this course is to provide us with a general understanding of what system software is involved for an application program to run, both on a single node and over a network, and how this system software is to be used. in support of this objective , the course will prepare us to do system -level programming. this course will demonstrate how to "use" (as opposed to "design") system components, such as memory, file systems, process control, inter -process communication, and networking. by the end of this course, we will have an understanding o f the problems and pitfalls typically encountered in the design and implementation of multithreaded and networked applications and systems. more specifically, by the end of this course we should be fairly good at making full use of the services provided by the underlying operating system by programming directly at the operating system interface level. w e will review the following aspects of a computer system, in no particular order: • what is an operating system; what are its components ; why system calls? • execution of a program; function calls; interrupts. • the os application interface; file system; process control; etc. • inter -process communication • concurr ency, threads, process/thread synchronization • network socket programming • principles and practices for s ecure computing . security threats in centralized and distributed systems; authentication, authorization, confidentiality; security mechanisms. • parallel and distributed computing books (not required for purchase) there is no required textbook for this class : the course material is assembled from multiple sources (books, existing courses, conversation with experts, and published research). however, the following list of books are most referenced in the assembled material for those who’d like an additiona l source of material to supplement lectures. • primary o [ospp ] operating systems: principles and practice, 2nd edition, thomas anderson and michael dahlin, recursive books, 2014 (here ) o [ostep ] operating systems: three easy pieces. [available online free here ] • secondary o [apue ] advanced programming in the unix environment, 3rd edition, w. richard stevens and stephen a. rago, addison -wesley pr ofessional computing series, 2013. o [molay ] understanding unix/linux programming : a guide to theory and practice, bruce molay, pearson education inc., 2003 other interesting reading s • computer systems o [csapp ] computer systems: a programmer's perspective , 3rd edition, randal e. bryant and david r. o'hallaron , prentice hall, 201 6. • operating systems o [osc] operating system concepts , 10th edition, silberschatz, galvin, gagne, john wile y and sons, inc. 2021 lectures lectures will be remote -asynchronous meaning the lecture content will be released on canvas weekly according to the master schedule. barring exception, effort will be made to release weekly content on the weekend in case you have discretionary time to read ahead. during lectures we will be covering operating systems and systems programming concepts and case studies. the material covered in the lectures will provide the background and foundation for you to appreciate the lab exercises designed to buttress lecture concepts an d to prepare to succeed in programming assignments . quizzes quizzes will be ‘take -home’ format offered on canvas , and aligned with key topic learnings. in most cases, quizzes will be online short format, multiple choice type of questions to test basic understanding of concepts presented during the lectures. labs labs will be held in-person, face -2-face. given the university requirements for the prescribed format of this course, the labs will not be conducted over zoom so if you are unable to be in college station physically, you may need to defer this course to a later semester. labs are where we will pu t into practice the material learned in the lectures, and where we will acquire a working knowledge of the unix /linux operating system . labs will meet twice weekly (tr for sections 500 -507 and two back -2-back sessions on friday for sections 597-599) where we will be presenting a new problem to motivate learning and facilitat e skill-building . after an introductory session to familiarize you with the particular environment that we will be using, there will be a continuing series of lab exercise s and programming assignments of moderate difficulty level , which will exercise different parts of the operating system: process and thread management, inter -process communication, networked execution, and so on. there will be 6 programming assignments (pa 0-5) assigned roughly on a bi -weekly basis. we will kick -off the course with pa0 which is a simple, warm -up exercise in c++. the master -plan contains the details. lab attendance is critical to ensure you understand the problem, actively hash the problem out with your classmates , and clarify with lab ta ’s and pt’s . assessment method (subject to minor changes!) : the course will have two exams and a series of quizzes and programming assignments . the grade allocation is as follows: 1. exams (midte rm and final ) = 40% (midterm=22%, final = 18%) 2. programming assignments = 54% (each project is 9% of the grade) 3. online -take -home quizzes ( 20+) = 6% the grading scale is as follows: • 90-100: a • 80-89: b • 70 – 79: c • 60 – 69: d • 59 and below: f late submission policy – subject to change exam and quiz late policies are stringent and fairly straightforward • exams : no exception without prior e-mail approval from the instructor . see university policy for details. • quizzes : online on canvas. late submissions will not be accepted without prior e - mail approval from the instructor. for the programming assignments, we are attempting something new for the late submission policy. below , a general philosophy is presented. philosophy : we all have varying working habits - some start early, some wait till the last minute. we are also affected by our environment - last minute surprises can come, health, etc. in addition, this course is typically paired with csce -315 which is also project intensive. so, we are planning to adopt a policy that accommodates the unknowns to some extent and also gives you the flexibility to respond to peaks and troughs in your enrolled course schedules : early turnin wins credit, late turnins earn penalty but can use earned c redits to offset the penalty . in the end, the overall accrued credit/ penalty is applied on the sum total which is then scaled. a separate document describing the policy in detail with examples will be made available on canvas. exams there will be one midt erm and one final examination. both exams will be offered online on canva s with required in -person attendance during designated lab session. those with accommodations from the department of disability resources (link ) must arrange to take the exam at the center. any exceptions to the above must be obtained from the instructor well in advance with proper justification via e -mail. the course master calendar will contain the exam dates and they will also be communicated in teams and canvas well in advance. communication policy your teaching staff will do their best to communicate relevant administrative information (deadlines, information about posted material, details about projects, locations of tutorials, and so on) in an effective and timely manner. we will be using microsoft teams platform for all course communication. please refer to the document “ csce313 how do i setup microsoft teams ” available on canvas in student r esources module . it contains simple steps to install teams and sign on to our course teams site. at times, reinforcement messages may also be sent via canvas, but our discussion forum is ms teams. e-mails listed on course roster are used for enrollment in canvas and teams . if you are not receiving teams or canvas updates, please contact the instructor. teaching staff support it is important to lay out broad expectations for support as follows based on the roles: your instructor will be on hand to answer queries on lectures and practice questions, offer mentoring, and conduct quiz/exam review sessions/support. your ta’s will conduct labs (graduate ta’s) , answer queries on pa’s, lab exercises, and lab quizzes, provide code qualit y feedback for pa submissions. their time is best spent on providing clarifications on assignments and offer detailed feedback on coding quality and organization. your graders will not directly interface with you in labs but will work behind the scene in grading programming assignments, and quizzes/exams per discretion of your instructor. as a general policy, i am asking the ta’s to not assist with debugging student code. it is both counter -productive to student learning and extremely stressful for the t eaching staff. they will expend much of the feedback in providing a clear understanding of the programming assignment expectations and common best practices. course acknowledgments lecture content : the course website and lecture notes have incorporated c ourse materials developed by dr. riccardo bettati, dr. guofei gu, dr. sarker tanzir ahmed, and dr. dmitri loguinov of texas a&m university, dr. avi silberschatz (yale), dr. lawrence angrave (uiuc), dr. thomas anderson (uw), dr. michael dahlin (google), drs . randall bryant and david o’hallaron of cmu, drs. anthony joseph and david culler of uc berkeley, dr. kuenning (hmc), dr. snoeren (ucsd). the copyright of these materials belongs to them. the instructor is especially grateful to drs. bettati and ahmed for making their entire course content available for use in this semester offering, especially because the instructor is returning to teach this course after a nearly 4+year hiatus. programming assignment content : pa’s have gone through evolution in the last several years. original programming assignments were created under the auspices of professors riccardo bettati and guofei gu. the instructor (tyagi) taught this course between 2014 -2016. during spring 2016, a small number of enterprising undergraduate students took the daunting task of working with the instructor and (then ta) prof. sarker tanzir ahmed to create a new set of programming assignments in addition to revising the existing ones. the resulti ng set of programming assignments was piloted by prof. ahmed in his fall 2016 csce -313 course and resulting student feedback was rolled in to the spring 2017 offering, and improved ever since. the lion’s share of contributions was made by andrew kirfman an d joshua higginbotham, both former csce undergraduate students. both the instructor and prof. ahmed are grateful for their contributions and honor their lasting legacy toward the benefit of the cse student community. and finally, a note for the sake of ou r health and well -being: to help protect aggieland and stop the spread of covid -19, texas a&m university urges students to be vaccinated and to wear masks in classrooms and all other academic facilities on campus, including labs. doing so exemplifies the aggie core values of respect, leadership, integrity, and selfless service by putting community concerns above individual preferences. covid -19 vaccines and masking — regardless of vaccination status — have been shown to be safe and effective at reducing spread to others, infection, hospitalization, and death. 