course information course information course number: csce221 course title: data structures and algorithms section: 517 - 520 time: lec - mwf 12:40 pm to 1:30 pm/ labs - mw 8:00 am to 12:20 pm location: zach 244/zach 596 credit hours: 3 instructor details instructor: harpreet singh chawla office: l.f. peterson building, 2nd floor phone: e-mail: harpreetsc@tamu.edu office hours: friday 2:00 pm - 4:00 pm or appointment by email course description specification, analysis and implemen tation of abstract data types for lists, stacks, queues, trees, hash tables, graphs, and their associated algorithms. performance trade -offs of different implementations; asymptotic analysis of running time and memory usage. includes the execution of stude nts programs written in c++; emphasis on adherence to good software engineering principles. course prerequisites  csce 121 " introduction to program design and concepts"  csce 222 " discrete structures " or math 302 " discre te mathematics " (at-least co - requisite) course learning outcomes at the end of this course students should be able to: 1. design and implement diverse data structures that allow easy access and manipulation of data using c++ programming language. 2. use the dat a structures to implement algorithms. 3. apply the big -o asymptotic notation to analyse and select an efficient algorithm for solving a given problem with respect to runtime and memory usage. textbook and/or resource materials  recommended textbooks: o “data s tructures and algorithm analysis in c++”, 4th edition, mark a. weiss, 2014, pearson, isbn -13: 978 -0132847377 or isbn -10: 013284737x. o “data structures and algorithms in c++ 2nd edition”, 2nd edition, michael t. goodrich, roberto tamassia, david m. mount, isbn -13: 978 -0470383278 or isbn -10: 0470383275. o you may need a textbook on c++ language from the previous semester, or any good c++ reference book(s).  slides used in the class/lectures. grading policy  grading scale: 90 -100 – a; 80 - <90 – b; 70 - <80 – c; 60- <70 – d; below 60 – f.  there will be o 4 assignments, each building upon the previous one. the 4 assignments together will make one course project. o labs every week, managed by the ta(s) – coding questions to solve in 50 minutes. take home if incomplete and submit for 20% of the points by the end of the day. o there will be two exams, a midterm and a final, both conceptual, multi -choice. o a quiz every week (1 hour, 10 points), based on the materials covered in the week. o peer reviews of the pseudocode/algo rithm question of assignments.  4 assignments – 35%; 15% labs; 10% peer reviews; 25% - exams (10% midterm and 15% final); 15% quizzes. rubrics weightage (%) range of marks grade assignments 35 90 – 100 a labs 15 80 – <90 b midterm 10 70 – <80 c final 15 60 – <70 d quiz 15 < 60 f peer reviews 10 note about graded materials:  assignments – the first question will be about writing the pseudocode for the assignment (30%) (unless stated otherwise). the next question will be about writing the corresponding code (50%), and an analysis of the time complexity of an algorithm (20%). o you are allowed to discuss with your peers, but those discussions should be limited to logic and the concepts. o you are not allowed to copy their solutions. we have tools that detect plagiarism, including similar code logic and program flow. o you must mentio n the names of the students you discussed the concepts with. there will be at least one name always there – of the student you did the peer review with. if there are other students with whom you discuss the logic, mention them. note: your code will be chec ked for plagiarism against your peers and github repos we can locate that have similar codes on them. o the pseudocode aspect of the assignment will be submitted and peer reviewed one week from the doling out of the assignment. the submission date will be mentioned in the assignment. changes can be made to the pseudocode based on peer reviews (if deemed appropriate by the student themselves) for final submission. o the code should have comments explaining the logic of the code. if there is any block of code tha t is doing something logical, briefly explain the logic for doing so, briefly (ideally in 2 – 3 sentences). not doing so will lead to a 5% deduction from the coding section of the assignment.  labs – a coding assignment in the lab directed by the ta. if not completed in the lab, complete it by the end of the day to receive partial credit (20%). if you collaborate with anyone (both in and out of the lab), mention it in the comments above the submitted code. all labs carry equal weightage.  quiz – a weekly quiz to evaluate the understanding of the concepts, code and complexity analysis of the algorithms or data structures taught in the week.  midterm/final – questions testing the understanding of concepts. all multi -choice. one-third of the final will be based on material covered before midterm.  peer review – students will be reviewing each other’s pseudocode for each assignment (groups of 2, different for each assignment). an advice is to consult each other about the review that the students submit. they will com ment on: o the correctness of the pseudocode/algorithm. o how the pseudocode/algorithm could be improved. o and how the reviewee’s own pseudocode/algorithm either dealt with what the reviewer got wrong, and/or how the reviewee can fix mistakes in their pseudoco de/algorithm. note: the review should be about the logic, rather than focused on the syntax. sound, good faith critiquing (even if incorrect) will receive full grade. class participation – peer -review and allowing discussions over the assignments and labs will test your interaction skills in the course. peer -review will substitute for your class participation. attendance – attendance is highly recommended, but not a graded component. late work policy unless a student has taken permission for submitting late, the following rules will apply:  we will follow a cumulative grading system . you can submit assignments late, but all the late days for each assignment will be tallied at the end of the semester. th is also means that if you submit your assignment before the deadline, those number of days will be subtracted from your late days tally. this is to keep you motivated and not give up mid -way through the semester if you fall behind in any assignment, giving you room to make up for the lost time.  if in-spite of submitting any initial assignments late, all assignments are submitted before or on the deadline day of the 4th assignment, no late penalty will be incurred.  late day penalty: we will deduct 1.25 per e very late day from the final score of the assignments . that means, if the cumulative total of all assignments was 450/500 (90%), for example, with a total of 10 late days, 12.5 will be deducted from 90 (totaling 77.5). in the final score, 77.5 will be cons idered for the 35% component of the grading scale instead of 90. work submitted by a student as makeup work for an excused absence is not considered late work and is exempted from the late work policy. to understand the circumstances under which makeup wo rk or excused absences are allowed, please read student rule 7 . course schedule google drive link is shared with the class. course information items technology support – we will be using:  canvas - for quizzes and uploading of assignments documents  github - push your submissions to your private repositories  piazza - join the piazza course page for discussions regarding anything pertaining to the class. https://piazza.com/tamu/spring2022/csce 221517520/home 