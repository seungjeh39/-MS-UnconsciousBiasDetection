course syllabus page 1 of 8 course information course number: csce 451 course title: software reverse engineering (reen) section: tbd time: tbd location: hrbb 113 credit hours: 3 instructor details instructor: jyh-charn liu office: petr 435 phone: 979-845-8739 e-mail: liu@cse.tamu.edu office hours: by appointment, on -line teaching assistant office: eaba 108b email: hdwang@tamu.edu office hour by appointment, on -line course description this course aims to introduce the art of inferring, and/or reproducing of partial or complete high -level computing logics from a binary executable code with out the original source codes. the cou rse starts with introduction of the relationship among high level programming languages and x86 asm statements . it will then expand to the x86 instruction set architecture (isa) and its computing models, and the compiler generated binary executables . through extensive hands -on exercises, assignments and tests, students will be guided to learn to develop the reserving strategy, starting from scope of reversing goal, hypothesis formation , iterative validation , selection of tool chains for static and dynamic analysis , disassembling, up to validation of reversing outcomes. the class also introduces basics of exploits , and defensive design against static and dynamic analysis. students are required to learn about the basics of legality and ethics of software reversing. the term hacking refers to the process of exploiting vulnerability of software systems by manual or automated processes. learning about hacking practices is essential to build defensive software systems, but misuse of the skills in the real -world environment can have serious legal consequences. re related laws differ greatly in different countr ies, region s, and types of activities. students are advised to take great cautions in their conducts. a “gut feeling, common sense” based mentality can lead to regrettable situations. in this class students will learn about selective legal cases related to real world re cases . course prerequisites ● minimal requirement: csce 313, or instructor’s approval. students must be proficient in common hll languages, programming, and common microprocessor architecture(s). ● jr/sr classification, but exception can be made per instructor’s ap proval. course syllabus page 2 of 8 ● this class has extensive hands -on work. students are advised to weigh their overall workload in taking this course. special course designation n/a course learning outcomes at end of the class, students should be proficient in the following aspects.  identify common copyrights and other related laws governing software rights and their reverse engineering activities.  gain knowledge on the relationship between hll and assembly statements.  identify and utilize the knowledge on the compilation process to identify high level language programs and their machine code interpretations.  extract the needed binary code structure information from the portable executable file formats.  form ulation and optimization of reversing strategies (such as brute force based, or math logic based) to perform static & dynamic analysis of binary codes.  survey of re resources  validation of disassembler outcomes.  gain knowledge on anti -analysis techniques to protect binaries. textbook and/or resource materials ● none required ● reference books (not exclusive) ● assembly language for intel based computers, by irvine ● the ida pro book, by chris eagle ● reverse engineering, secret of reverse engineering, by eldad eilam ● practical malware analysis, by m. sikorski and a. honig ● open literature, vendors technical information (intel, microsoft) ● a laptop computer with sufficient performance to run a designated linux virtual machine, compilers and re tools. the laptop should also have large hdd space and main memory. past experience suggests that common laptops would be usable for class activities, but lack of computing resources can significantly affect the productivity or even classwork outcomes. ● major tools ida pro, ghidra, godbolt.org, linux and compilers , various utility tools grading policy • labs, exercises, assignments 40% • tests 40% course syllabus page 3 of 8 • final project 20% • the grading scale : by numerical ranking of total scores. special rules for graded team projects ● every student is required to contribute technical and documentation work. ● if there is a project partner dispute, it is critical to report the issue quickly to the instructor or ta. otherwise, you share grade consequences if the issues contribute to a poor grade. in most cases, you are encouraged to discuss assignments, but the final product submitted for grade must be the individual work of the person turning it in . using third party codes and tools to solve challenging computing problems is critical to most software reverse engineering, and therefore is allowed. when doing so, it is a must to have full disclosure prior reporting results. claiming credit without s uch disclosure will be considered cheating. graded attendance – ● all absences from graded activities – tests, quizzes and some timed lab exercises require prior approval of the instructor. students without prior absence approval may be allow ed to make up the missing activity with 2 5% or more grade penalty. ● students are responsible for any missed materials. ● university excused absence are defined by student rule 7; see http://student - rules.tamu.edu/rule07. ● 3-strike rule: a final grade of d/f for m issing 3 graded activities. ● if advance notification is not possible (e.g. unexpected illness , family emergency ) for the absence, contact the instructor at the earliest time with some supporting evidence/document. late work policy • late work will be accepted up to one day late with a 25% penalty . course schedule week (15) topic assignments 1 2 3 4 5 6 7 8 9 10 high level languages (hll) constructs (i) hll constructs & asm (ii) stack , accumulator -based processor , function call mixed hll & asm programming (godbolt) (i) hll & asm programming & dbg (godbolt) (ii) binary reversing (i) ethics & legality binary reversing (ii) binary reversing (iii), tool: binary code visualization rigi, ccnav binary reversing (iv), tool: ghidra or ida pro binary reversing ( v), tool: ghidra or ida pro , de- compiler validation , semantic labeling in class exercises /lab in class exercises /lab in class exercises/lab quiz 1 in class exercises/lab in class exercises/lab reading and report in class exercises/lab in class demo, take home assignment in class follow along/lab , take home assignment course syllabus page 4 of 8 11 binary reversing (vi): password cracking in class exercises/lab /timed test 12 13 14 15 binary reversing (v ii), tool: symbolic computing z3/angr term projects – assigned binary images term project term project optional course information items n/a 