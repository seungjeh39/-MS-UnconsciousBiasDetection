page 1 of 10 syllabus course information course number: csce 430 course title: problem solving programming strategies section: 500, 200 (see supplement for section 200 additional information) time: lecture: mw 3:00 -3:50 lab: f 3:00 -5:30 location: lecture: hrbb 113 lab: eaba 118 see canvas for links for online access credit hours: 3 instructor details instructor: john keyser office: pete 408 phone: (979)458 -0167 e-mail: keyser@cse.tamu.edu office hours: mw 4:00 -5:00 other times or by zoom available by appointmen t teaching assistant: adil rasiyani e-mail: adil.rasiyani @tamu.edu office hours: tbd teaching assistant: dhruv patel e-mail: dhruv414@tamu.edu office hours: tbd course description this course teaches methods for analyzing fundamental programming problems from a variety of domains and implementing solutions quickly and efficiently. the class will use problems based on competitive programming contests to develop skills in problem analysis, codin g, and testing. solving problems will involve identifying and applying a range of algorithmic solutions, including those dealing with combinatorics, dynamic programming, graphs, numerical calculations, string processing, and geometry, along with other mor e specialized algorithms. course prerequisites csce 411 or permission of instructor course learning outcomes at the conclusion of this course, students should be able to: page 2 of 10 • analyze a given programming problem to identify the algorithms needed to solve th e problem • implement a program, including implementing the basic algorithms needed, to solve specified problems • develop test cases that will ensure that implemented programs are robust to a full range of valid inputs. textbook and/or resource materials competitive programming , by steven halim, felix halim, and (for the 4th edition) suhendry effendy. the book can be bought via the website: https://cpbook.net . the 4th edition is in two separate books, available only in paperback. the 3rd edition is available in e -book (and hardcover) format. we will cover almost everything in book 1, and will cover parts of book 2. the textbook is considered required, in the sense that we will refer to it and you will be able to make use of it thr ough the course. however, students in the past have been able to go through the course without buying it. grading policy the course grades will consist of a large number of programming problems of varying difficulty and topics given over the course of the semester. problems will be assigned in 3 different ways: • problems to be completed individually on the student’s own time. generally, individual problems will be assigned each week and due on saturdays, unless the class agrees on a different time. y ou should expect to spend several hours every week on your own, working on these problems. • problems to be completed within a timed period - lab. in each lab period, students will be given a set of problems to be solved during that lab period. these pro blems are meant to be challenging, with the time pressure being a significant factor. • team problems to be completed within a timed period - lab. during some of the lab portions of the class, students may be teamed up with one or two other students, and together they may be asked to complete problems during the lab period. in this case, all students on the team will receive credit for problems completed. note: team problem solvin g may be limited or re moved depending on needs for personal intera ction as the semester goes on . for each set of problems, students will be given a “base” number of problems they are expected to solve; there may be more problems given than that number, and students may solve more than the base number, if they are able to do so. the total number of base problems over the course of the semester will be approximately 125. in all cases, completing a problem will mean that the code passes a series of validated test data that the students will not be shown. each problem will be noted as either complete or incomplete by the given time (either the due date or the end of the timed lab period). problems completed after the deadline (i.e. after the submission time for weekly individual problems, or outside of lab time during the t imed period) can receive half credit. this is page 3 of 10 referred to as “upsolving.” students will have a limited period to upsolve these problems late for half credit; typically this will be one week following the original deadline. the final grade in the course will be based on the percentage of problems solved by each student (i.e. the number completed divided by the base number). that is, the number completed will be the number of problems completed individually on their own time, plus the number completed ind ividually within a timed period, plus the number completed on a team within a timed period. the number possible will be the number of problems assigned as a base for students’ own time, plus the number assigned as a base during the individual timed period s, plus the number assigned as a base during team timed periods. all problems will be weighted equally. to earn an a grade, a student must also get at least 50% of the base points for the problems to be completed individually on their own time, in ever y week of the class. this can include points for solving during the week, or later upsolving of the problems. the grading scale will be: a = 90 % or greater, and at least 50% of available problems in individual weeks b = 80 -89 % c = 70 -79 % d = 60 -69 % f = <60 % late work policy late work is not accepted (see excused absence information below). the deadlines for submission will be set automatically and are strict. note, however, that the upsolve period allows for solving problems following the due da te. course schedule schedule the following is the expected schedule, including some of the types of algorithms that are expected to be covered each week. however, as the semester goes on, this will likely be adjusted. week topic chapter s 1 introduction; problem formats; online judging systems; parsing input; formatting output 1 2-4 fundamental data structures and their implementation on your own or in libraries (various trees, sets, graphs, search structures) 2 5-7 applying divide and conq uer, greedy, and dynamic programming approaches 3 8-11 applying graph algorithms (search, shortest path, minimum spanning tree, network flow, bipartite graph matching) 4, 8.4-8.5 12 string processing (editing, edit distance, subsequences, suffixes) 6 page 4 of 10 13 applying numerical algorithms and combinatorics (gcd, lcm, chinese remainder theorem and modular math, large number computations, generating and counting permutations and combinations) 5 14 applications of geometric algorithms (2d line seg ment and polygon queries – intersection, area; calculations on a sphere; 3d volume calculations; ray -surface intersection; convex hull; spatial subdivisions) 7 ? selected additional algorithms and their application (if time allows) 8-9 optional course information items fee for online system we will be using the kattis system (see online judging below) under a program that allows free use for our educational activities. however, at some point in the semester there may be a fee required t o continue to use the kattis system. this fee will not exceed $35 per student. if this fee becomes required, students must agree to pay the fee individually (likely requiring a credit/debit card payment) promptly. online judging online judging systems will be used to perform the testing and acceptance of solutions to problems. this will require students to obtain a user account on these external systems. the kattis system (tamu.kattis.com) will be the main system used, but other s might be used on occasion. students are expected to keep their login information private, as they would for a department computer system. the online system’s judgment will be the sole factor determining whether problems are accepted or not, and this wi ll generally mean passing all test cases (not just some) for the problem. communication we will use canvas for the course materials. the discussion area of canvas will be used to allow students to post and answer questions, to make course announcements, etc. grades will be posted on canvas, though the actual submission and grading will be through the kattis system. students are responsible for checking canvas regularly for communications and occasionally verifying that grading matches their kattis judgm ents. limitations on anonymity the course will use a competitive programming framework for judging and posting results of all problem sets. this means that students will be able to see an indication of which problems other students have attempted, and th eir success or lack of success in having these accepted. while there can be the option of hiding the specific user name, students cannot expect their performance to be kept completely anonymous from others, and it may be that other individuals can determi ne their performance on problem sets either by process of elimination, or from other information they determine from the competitive system. source code presentations some problems worked on may have multiple solutions, and throughout the course, individu als’ work might be used as examples for illustrating approaches to solving a problem, page 5 of 10 writing code, etc. students may be called on to describe their own solution to a problem or the approach they tried; advance warning will be given in such cases with stu dents given the opportunity to opt -out of presenting. alternately, students’ code may be used as an example shown to other students for how a given solution might be coded; code presented this way will be kept anonymous unless the student has first agreed to let it be presented. computers you will need to use your own computer for programming and submitting assignments, including during lab. students will need to bring their own laptop to the friday lab sessions . the laptop should be set up with necessary compi lers/software, or access to shared/o nline sources, sufficient to enable to students to write and test their own computer programs. 