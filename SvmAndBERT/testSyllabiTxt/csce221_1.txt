course syllabus page 1 of 21 csce 221 honors syllabus – fall 2022 course information course number: csce 221 course title: data structures and algorithms section: 212 time: lecture time mwf 11:30 am – 12:20 pm lab time mw 12:40 pm – 1:30 pm location: lecture locatio n zach 244 lab locatio n zach 584 credit hours: 4 instructor details instructor: dr. philip ritchey office: petr 423 phone: 979-845-3510 e-mail: pcr@tamu.edu office hours: read online office hours on canvas. course description specification, analysis and implementation of abstract data types for lists, stacks, queues, trees, hash tables, graphs, and their associated algorithms. performance trade -offs of different implementations; asymptotic analysis of running time and memory usage. includes the development and execut ion of programs written in c++; emphasis on adherence to good software engineering principles. course prerequisites csce 121 – introduction to program design and concepts csce 222 / ecen 222 – discrete structures for computing or math 302 – discrete math ematics (either may be taken concurrently with csce 221 ) course syllabus page 2 of 21 course learning outcomes 1. describe and implement several data structures that allow easy access and manipulation of data using the c++ programming language. 2. apply big- o asymptotic notation to anal yze and select efficient algorithms for solving a given problem with respect to time and memory usage. textbook and resource materials • required textbook: “data structures and algorithm analysis in c++,” 4th edition, mark a. weiss, 2014, pearson, isbn -13: 978- 0132847377 or isbn -10: 013284737x. • required technology: a computer sufficient cpu and ram to run several applications at once, including a web browser (e.g. firefox), text editor, and *nix terminal. • required access: internet. some course activities, including access to material, assessments, and feedback are delivered online, therefore consistent and stable access to the internet with sufficient bandwidth and data capacity is required. personal accessibility statement i recognize disability as an aspect of diversity, equity, and inclusion. for that reason, i try to design all of my course material to be inclusive and accessible. however, i realize that some aspects of the course may not yet be as inclusive as they could be. i r ely in part on my students to let me know when and where they need some accommodation. i want you to know that my top priority is for my students to learn as much as they can in my class. that includes working with students to find solutions that help them perform at their best. i hope tools like the disability accommodation portal will make it easier for students to start the conversation about how we can work together to help them make the most out of their learning opportunities. course syllabus page 3 of 21 grading policy graded items item description programming assignme nt c++ programming projects to practice implementing and applying the data structures and algorithms covered in class and to develop c++programming ability. programming assignments are submitted to and automatically graded on gradescope . problem set handwritten assignments to develop knowledge, skills, and abilities of describing and analyzing data structures and algorithms. problem sets will be su bmitted to and graded on canvas . quiz handwritten or c++ programming assessments to measure mastery of the expected knowledge and skills of describing, implementing, applying, and analyzing data structures and algorithms. quizzes are completed during t he lab session and must be submitted at or before the end of that session. quizzes will be submitted to the ta in lab or to gradescope. quizzes will be graded by hand or on gradedscope. final exam the final summative assessment of mastery of expected kno wledge and skills. the final exam’s structure and content will be similar to the programming assignments, problem sets, and quizzes . the final exam will be submitted during the final exam session to the instructor or ta. the final exam will be graded by hand or on gradedscope. honor’s project a substantial assignment that entails analyzing and implementing advanced data structures an d algorithms. course syllabus page 4 of 21 grading scale programming assignments there are four possible grades for programming assignments: mastered, completed, attempted, and not attempted. the criteria for earning each grade are as follows: • mastered: score ≥ 90% from autograder on gradescope • completed : 90% > score ≥ 70% from autograder on gradescope • attempted : 70% > score ≥ 50% from autograder on gradescope • not attempted : score < 50% from autograder on gradescope problem sets there are three possible grades for proble m sets: completed, attempted, and not attempted. the criteria for earning each grade are as follows: • completed : complete ≥ 70% of assigned problems with a serious attempt . • attempted : complete ≥ 50% of assigned problems with a serious attempt . • not attempted : complete < 50% of assigned problems with a serious attempt . a “serious attempt” is not necessarily correct, but demonstrates that the student spent time and thoughtful effort on solving the problem. a serious attempt requires that • every part of the problem is seriously attempted • work is shown (no magic results) • work is relevant and appropriate for the problem additional indicators of a serious attempt include that • some progress at solving the problem is made • ineffective strategies (or dead -end attempts) are acknowledged • effort is made to check answers, such as verifying small/simple cases • interesting or unexpected results are identified • pictures and diagrams are included • pseudocode is included • plots and tables of data are included course syllabus page 5 of 21 quizzes and honor’s p roject there are four possible grades for quizzes: mastered, completed, attempted, and not attempted. the criteria for earning each grade are as follows: grade description mastered excellent example that exceeds expectations. complete and clear communication. evidence of c lear understanding of topic . any error is trivial. completed meets expectations. understanding is evident. needs some revision or expansion to be excellent , but written work is good enough. no additional teachin g is required. attempted needs revision. partial understanding is evident, but some significant gaps remain. needs more work / teaching / communication. not attempted fragmentary. clear misunderstanding. insubstantial attempt made. or, no work was submitted at all. these are general rubrics for the quizzes . the specific expectations depend on the module, but the general rule is that the quiz for topic x expects you to demonstrate your knowledge and skills about x . multiple choice / fill -in-the-blank / short answer quiz rubric • mastered: ≥ 90% correct answers, • completed : ≥ 70% correct answers • attempted : ≥ 50% correct answers • not attempted : < 50% correct answers free response / algorithms / analysis / programming quiz rubric • mastered (score ≥ 90% ) o all parts of completed are included. o the work demonstrates a high level of mastery, e.g. the work is correct, efficient, and elegant. o every step of the work is well -communicated, e.g. no skipped steps, every step follows clearly from the pre vious step or is annotated or explained. • completed (score ≥ 70%) o the work demonstrates basic mastery (competency), e.g. the work is correct, but may be inefficient or inelegant. o the work demonstrates the expected knowledge or skill(s) o the work is clear and easy to follow. • attempted (score ≥ 50%) o the work is incorrect. o the work is incomplete. o the work does not demonstrate the expected knowledge or skill(s), e.g. steps are skipped or expected justification is not stated. o the work is unclear or difficult to fo llow. • not attempted (score < 50%) o fragmentary. o clear misunderstanding. o insubstantial attempt. o illegible course syllabus page 6 of 21 final exam the final exam is nominally graded on a scale from 0 to 100, but there are simply four significant ranges of scores: • high : score ≥ 80% signifies a high level of demonstrated mastery • acceptable : 80% > score ≥ 70% signifies an acceptable level of demonstrated mastery • unacceptable : 70% > score ≥ 50% signifies an unacceptable level of demonstrated mastery • failure : score < 50% signifies a fa ilure to demonstrate mastery final letter grade the final letter grade is assigned according to the quantity and quality of content mastery demonstrated through activities and assessments. grade requirements a • master / complete a. 9 programming assignments* b. 7 problem sets c. 9 quizzes* *: with 5 mastered • high score on final exam • mastered on honor’s project b • master / complete a. 8 programming assignments* b. 6 problem sets c. 8 quizzes* *: with 3 mastered • acceptable score on final exam • completed on honor’s project c • complete a. 7 programming assignments b. 5 problem sets c. 7 quizzes • acceptable score on final exam • completed on honor’s project d • complete a. 5 programming assignments b. 4 problem sets c. 5 quizzes • unacceptable score on final exam • attempted honor’s project f none. you must satisfy every requirement to earn the corresponding grade , with some exception (s) (see minimum final grade override policy ). course syllabus page 7 of 21 2 attempted = 1 completed two grades of “attempted” can count as one gra de of “completed”. there is no such relationship between “not attempted” and “attempted” or between “completed” and “mastered”. final letter grade override the final grade shall be a t least a c in the following case (s): • attempted (or better) on 10 programming assignments, 10 problems sets, and 10 quizzes and acceptable score (or better) on final exam. • the numeric weighted rubric (see below) gives a passing grade but the mastery rubric does not. i will review final letter grades before submitting them to evaluate the cases of students who were “close” to a higher grade on a case -by-case basis. i may add other cases or may relax requirements if i deem it necessary . due to edge cases that may arise from certain scenarios (see final grade examples ), i will also compute final letter grades using the following weighted rubric : component weight programming assignments 20% problem sets 20% quizzes 20% final exam 20% honor’s project 20% this letter grade will be used to detect and correct cases where the mastery grading rubric gives a non - passing grade (less than c). course syllabus page 8 of 21 example grades consider the following examples of anonymous students adapted from previous semester s. student a pas: 99, 100, 100, 0, 87, 100, 100, 100, 100, 100 (avg. = 88.6) pss: 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.5 (avg. = 95.0) qs: 94, 80, 77, 91, 79, 100, 92, 93, 95, 96 (avg. = 89.7) fe: 95 this person earned an a because they • completed 9 programming assignments and mastered 8 of them • comple ted 9 .5 problem sets (1 att. = 0.5 comp.) • completed 10 quizzes and mastered 7 of them • earned a h igh grade on the final exam student b pas: 35, 82, 91, 83, 94, 79, 81, 0, 71, 91 (avg. = 70.7) pss: 1, 1, 1, 0, 0.5, 1, 1, 1, 1, 0.5 (avg. = 80.0) qs: 97, 85, 67, 60, 73, 62, 70, 80, 94, 90 (avg. = 77.8) fe: 89 this person earned a b because they • completed 8 programming assignments and mastered 3 of them • completed 8 problem sets ( 7 comp. + 2 att. = 8 comp.) • completed 8.5 quizzes and mastered 3 of them (7 comp. + 3 att. = 8.5 comp.) • earned (greater than) an acceptable grade on the final exam student c pas: 36, 86, 87, 100 , 84, 97, 70, 92, 5, 94 (avg. = 7 5.1) pss: 1, 1, 0, 0.5, 1, 1, 1, 1, 0.5, 0.5 (avg. = 75.0) qs: 71, 96, 96, 76, 49, 85, 100, 47, 91, 36 (avg. = 74.7) fe: 96 this person earned a c because they • completed 7 programming assignments (3 mast. + 4 comp. = 7 comp.) • completed 7 .5 problem sets ( 6 comp. + 3 att. = 7 .5 comp.) • completed 7 quizzes and mastered 4 of them • earned (greater than) an acceptable grade on the final exam course syllabus page 9 of 21 student d pas: 86, 28, 64, 71, 90, 100, 0 , 52, 48, 79 (avg. = 61.8) pss: 0.5, 1, 1, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 1 (avg. = 60.0) qs: 84, 0, 63, 71, 85, 26, 0, 87, 0, 80 (avg. = 49.6) fe: 77 this person earned a d because they • completed 5 programming assignments • completed 6 problem sets (3 comp. + 6 att. = 6 comp.) • completed 5 quizzes • earned (greater than) an unacceptable grade on the final exam student e pas: 98, 94, 54, 51, 77, 59, 79, 88, 88, 85 (avg. = 77.3) pss: 0.5, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 1, 1, 0.5 (avg. = 65.0) qs: 50, 75, 81, 78, 52, 61, 80, 97, 82, 82 (avg. = 73.8) fe: 72 this person earned a c (instead of a d) because they • attempted 10 programming assignments (2 mast. + 5 comp. + 3 att. = 8 comp.) • attempted 10 problem sets (3 comp. + 7 att. = 6.5 comp.  would have earned a d ) • attempted 10 quizzes (1 mast. + 6 comp. + 3 att. = 8.5 comp.) • earned an a cceptable grade on the fin al exam student f pas: 0, 15, 69, 42, 0, 49, 75, 0, 41, 51 (avg. = 34.2) pss: 1, 0.5, 0, 1, 1, 0, 0, 0.5, 1, 1 (avg. = 60.0) qs: 22, 31, 85, 6 0, 59, 0, 0, 0, 93, 80 (avg. = 43.0) fe: 53 this person earned an f because they • completed 2 programming assignment s (1 comp. 2 att. = 1.5 comp.) • completed 6 problem sets ( 5 comp. + 2 att. = 6 comp.) • completed 4 quizzes (1 mast. + 2 comp. + 2 att. = 4 comp.) • earned an una cceptable grade on the final exam course syllabus page 10 of 21 student g (a made -up example) pas: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 (avg. = 100.0) pss: 0.5, 1, 1, 0, 1, 1, 1, 0, 1, 0 (avg. = 65.0) qs: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 (avg. = 100.0) fe: 100 this person earned a c (instead of a d) because they • completed 10 programming assignments and mastered 10 • completed 6.5 problem sets ( 6 comp. + 1 att. = 6.5 comp.)  would have earned a d • completed 10 quizzes and mastered 10 • earned a high grade on the final exam this example is manufactured to demonstrate the catastrophic result of not making a serious effort on all aspects of the course. i hope that this situation will be never be realized. i think the probability of it is very nearly zero and i am including this example to help ensure that t he probability stays very near zero. such a situation could happen for any single category: demonstrating mastery in three out of four categories, but failing to demonstrate it in the fourth. the best ways to avoid this happening is to submit your work o n time and to review and respond to feedback (through consistent and deliberate practice) as soon as it is received. in this fictitious case, the student may have ignored (or otherwise neglected) the feedback on their problem sets. or, they may have waite d until the end of the semester to submit their problems sets and therefore did not give themselves enough time to review and respond to the feedback. the existence of such edge cases (no matter how improbable they are) informs my policy on final letter grades . course syllabus page 11 of 21 late work policy late work is work which is submitted after the specified deadline for the assignment or assessment. item late work policy programming assignments late work is accepted without penalty. problem sets late work is accepted without penalty. quizzes late work is not accepted. honor’s project late work is not accepted. work submitted by a student as makeup work for an excused absence is not considered late work and is exempted from the late work policy. makeup work for excused absences must be arranged with the instructor. see also: makeup work policy . course syllabus page 12 of 21 course schedules lectures students are expected to have read the relevant section in the textbook before the class in which the topic is discussed. lecture is a guide and support for learning. lecture is not a replacement for independent study , review , and deliberate and consistent practice . students are encouraged to ask questions during lecture. week day date lecture topics textbook 1 m 22 aug classes start 24 august, get excited! – no class w 24 aug course overview and syllabus f 26 review: c++ programming chapter 1.4, 1.5 2 m 29 review: mathematics chapter 1.2 w 31 c++ templates, list adt chapter 1.6, 3.1, 3.2 f 02 sept list adt chapter 3.1 – 3.4 3 m 05 labor day – no class w 07 linked list chapter 3.5 f 09 direct and indirect proofs chapter 1.2.5 4 m 12 proof by induction chapter 1.2.5 w 14 big-o analysis chapter 2.1 f 16 stack adt chapter 3.6 5 m 19 queue adt chapter 3.7 w 21 introduction to analysis of algorithms chapter 2.1 – 2.3 f 23 running time calculations chapter 2.4 6 m 26 running time calculations chapter 2.4 w 28 recursion, structural induction chapter 1.3 f 30 introduction to trees and tree traversal chapter 4.1, 4.2, 4.6 7 m 3 oct search tree adt and binary search trees chapter 4.3 w 5 avl trees chapter 4.4 f 7 avl trees chapter 4.4 8 m 10 fall break – no class w 12 avl and red -black trees chapter 4.4, 12.2 f 14 red-black trees chapter 12.2 9 m 17 red black trees chapter 12.2 w 19 set adt chapter 4.8 f 21 map adt chapter 4.8 10 m 24 hashing chapter 5 w 26 binary heap chapter 6.3 f 28 priority queue chapter 6.1 – 6.4 11 m 31 sorting chapter 7 w 2 nov sorting chapter 7 f 4 graph definitions and representations chapter 9.1 12 m 7 topological sort chapter 9.2 w 9 topological sort chapter 9.2 course syllabus page 13 of 21 f 11 single source shortest path, breadth -first search chapter 9.3 13 m 14 dijkstra chapter 9.3.2 w 16 minimum spanning tree, prim’s algorithm chapter 9.5 f 18 disjoint set, kruskal’s algorithm chapter 8.1 – 8.5, 9.5.2 14 m 21 greedy algorithms chapter 10.1 w 23 reading day – no class f 25 thanksgiving holiday – no class 15 m 28 divide and conquer chapter 10.2 w 30 master theorem chapter 10.2.1 f 2 dec amortized analysis chapter 11 16 m 5 amortized analysis chapter 11 w 7 last day of class: something fun f 9 final exams – no class 17 m 12 final exams – no class w 14 final exam at 10:30 am – 12:30 pm in zach 244 course syllabus page 14 of 21 lab and quiz sessions lab and quiz sessions are a time to practice and assess knowledge, skills, and abilities. week day date lab activity 1 m 22 aug labs/quizzes start 24 august, get excited! – no lab w 24 0th lab session: meet your ta and lab mates 2 m 29 1st lab session : math and c++ review w 31 1st quiz session 3 m 05 sept labor day – no lab session w 07 2nd lab session : c++ templates, lists 4 m 12 3rd lab session : proof by induction w 14 2nd quiz session 5 m 19 4th lab session : big -o, stack, queue w 21 3rd quiz session 6 m 26 5th lab session : running time calculations w 28 4th quiz session 7 m 03 oct 6th lab session : recursion, struct. induction, trees w 05 5th quiz session 8 m 10 fall break – no lab session w 12 7th lab session : avl trees 9 m 17 8th lab session : red -black trees w 19 6th quiz session 10 m 24 9th lab session : set, map, hashing w 26 7th quiz session 11 m 31 10th lab session : heap, priority queue, sorting w 02 nov 8th quiz sessio n 12 m 07 11th lab session : graphs, topological sort w 09 9th quiz session 13 m 14 12th lab session : shortest path alg .s – bfs, dijkstra w 16 10th quiz session 14 m 21 13th lab session : mst alg.s – prim’s and kruskal’s w 23 thanksgiving holiday – no quiz session 15 m 28 14th lab session : greedy and d&c algorithms w 30 11th quiz session 16 m 05 dec 15th and final lab session : amortized analysis w 07 dec 12th and final quiz session quiz topics 1. math and c++ programming 2. analysis of algorithms 3. lists, stacks, and queues 4. binary search trees 5. hashing 6. heap and priority queue 7. sorting 8. graphs 9. algorithm design 10. amortized analysis the quiz over topic n will be available on and after the n th quiz session. course syllabus page 15 of 21 homework homework are activities to support acquisition and development of knowledge, skills, and abilities through consistent and deliberate practice. assignment (pa & ps) recommended due date 1 8 september 2 18 september 3 28 september 4 8 october 5 18 october 6 28 october 7 7 november 8 17 november 9 27 november 10 7 december homework is officially due by 11:59 pm on wednesday 7 december 2022. final exam 10:30 am – 12:30 pm wednesday 14 december 2022 in zach 244. to do your best on the exam: • get plenty of sleep and eat healthy and well -balanced meals before the exam • engage in consistent and deliberate practice to improve your knowledge, skills, and abilities throughout the entire semester honor’s project the honor’s project is due at 11:59 pm on 7 december 2022. course syllabus page 16 of 21 other course information items quiz policy most wednesday la b sessions are quiz sessions. during a quiz session, a student may take any available quiz for which they are eligible (see quiz eligibility ). quizzes are timeboxed to 25 minutes, so it is possible to take two in one session (or more if the student finishes two quizzes in less than 50 minutes). the first quiz session is wednesday 31 august. the last quiz session is wednesday 7 december. there is a lab session on wednesday 24 august, but that session will not be a qu iz session. there is no quiz session on wednesday 23 november due to thanksgiving break (have a safe and happy break). in all, there are 1 2 quiz sessions (see lab and quiz sessions ). if you have an accommodation letter from disability resources that includes extra time on timed assessments , you can either choose to take the quiz in the lab room during the quiz session or at the testing center. either way, you are responsible for making the a ppropriate arrangements. please contact me as early as possible in the semester (and bring a copy of your accommodation letter) so i can help you make sure you have the best chance for success. quiz eligibility you must complete ( score ≥ 70%) quiz n befo re you can attempt quiz n+1 . quiz 1 will be available starting from the 1 st quiz session on 31 august. quiz 10 will be available starting from the 10th quiz session on 16 november. final exam policy the final exam is the final summative assessment in th e course and is therefore a required activity . (ok… nothing is really required. but, missing the final exam would be a catastrophic mistake. ) revision and resubmission of work programming assignments programming assignments may be revised and resubmitted after receiving feedback from the autograder. there is no limit to the number of submissions. problem sets problem sets may be revised and resubmitted once (for a total of two submissions). s tudents are encouraged to review the feedback from the tas and revise their problem -solving work. quizzes quizzes cannot be resubmitted, but students may retake a quiz that they have previously taken (the version will be different, though) during any quiz session after their work has been returned with feedback (usu ally < 1 week from date of submission) . there is no limit to the number of times a student may retake a quiz (except that the semester will eventually end) . honor’s project the honor’s project cannot be resubmitted. course syllabus page 17 of 21 inventory of tools and services this is a list of the tools that we will use. • learning management system: canvas • submission of graded items: canvas , gradescope • q&a forum: email, canvas , slido , discord • source code editor: vs code is recommended • compiler: gcc ≥8.4 is recommended • c++ standard: 17 • build system: gnu make • version control: git , github.tamu.edu • online ide: onlinegdb.com and repl.it are recommended • typesetting for pr oblem sets : latex is recommended (you can use overleaf for editing in a cloud environment) . ms word , openoffice writer are acceptable. • telepresence: zoom course syllabus page 18 of 21 