s y l l abu s course information course information course number: csce 410/61 1 course t itle: operating systems time/location: asynchronous online (activities are on tr) credit hours: 3 instructor details instructor: riccardo bettati office: petr 417 / online phone: 845-5469 e-mail: bettati@tamu.edu office hours: by email weekly live session with instructor: tba, on zoom (link will be provided on canvas)co-instructor: junjie w ang office: tba phone: tba e-mail: jjwang@tamu.edu (mailto:jjwang@tamu.edu) office hours: tba weekly life session with instructor: tba , on zoom (link will be provided on canvas) course description this course gives an overview of the general architecture and the most important components of modern operating systems. the student will leverage knowledge acquired in previous courses on computer architecture and computer systems to understand (and to some level implement) aspects of operating systems, such as memory management, persistent storage and file systems, threading, scheduling, and resource management in general. the student will understand fundamental approaches to virtualization and what it takes to build a distributed system. the course will cover general aspects, realization approaches, and case studies. in addition, the student will implement a simple operating system that will be able to boot and run on a bare pc. course prerequisites prerequisites for this course are a course in computer organization or computer architecture (csce 312 or ecen 350) and a course on computer systems (csce 313), or equivalent. in particular , the course assumes (a) some understanding with interrupts from a hardware perspective, (b) some familiarity with low-level programming with some instruction set, (c) some understanding of the theory and practice of multithreaded programming and synchronization, and (d) some basic familiarity with programming in c/c++. check out this video (https://www.dropbox.com/s/pni30twrxuemsdi/csce_410-611-course%20intro- rev.mov?dl=0) for an introduction to the course! special course designation (none) course learning outcomes by the end of the course, students should be able to do the following: describe the role, the architecture, and the major components of an operating system. describe the role and operation of exception and interrupt handling. implement a virtual memory manager for a paged system. describe and compare various forms of concurrency mechanisms. describe and compare various synchronization mechanisms, both for single-processor and multiprocessor systems. implement a kernel-level threading system for a single-processor system. implement a simple device driver . implement a simple file system. describe the motivation for virtualization. describe and compare the various virtualization approaches and their ef fect on system performance. describe the major dif ficulties encountered in the design of networked and distributed systems. textbook and/or resource materials this course will be using the following two textbooks: operating system concepts 9th or 10th edition , by silberschatz, galvin, gagne, john wiley & sons, inc., new y ork, 2012, isbn-13: 978-1 118063330. (any recent edition will be fine. reading assignments in the course will use the chapter numberings from the 9th and 10th edition. if you use an earlier textbook, you will have to map the chapters to your edition.) operating systems: three easy pieces by remzi and andrea arpaci-dusseau. this book is available for free in pdf form. it can also be purchased as hardcopy . grading policy the course will have a midterm and a final exam (totaling 400 points). in addition, there will be a series of design and programming assignments (machine problems) that will walk the students through the steps of designing and developing a simple operating system (400 points). finally there will be a set of daily quizzes (100 points) and a set of homework assignments (100 points). the course will be using a standard letter grading scale. standard letter grading scale: a = 90% and above b = 80% and above c = 70% and above d = 60% and above f = less than 60% submissions of assignments homework assignments and machine problems will be posted and submitted on canvas. it is the student’ s responsibility to make sure that the correct assignment is submitted to the correct place. also, canvas submissions may look completed when they actuall y are not. it is the student’ s responsibility to make sure that the submission process is completed. it is best to download the submission and to confirm that the submission stored on canvas is the intended one. under no circumstances will the instructor team consider material that has not been part of the original submission. if a student wants to add to or correct submitted files because they noticed that the original submission was wrong or incomplete, they can do this, but this will be considered as a new submission, and any late penalty will apply . the instructor and the t a’s will not consider non - submitted material, and they will not consider the file timestamps (as opposed to submission timestamps) as indication of completion of the assignment. (t ime stamps of files can be easily tampered with and will therefore not be considered.) late work policy deadlines for on-line quizzes and homework assignments will be hard. late submissions will not be accepted. unless noted otherwise, lateness for machine problems is penalized with 1/5 of the earned points per calendar day (1/3 during 10-week summer courses). lateness penalty starts at the deadline and is pro-rated. this means that the student will incur a penalty of approximately 0.0139 percent for each minute that their submission is late (0.0231 percent during 10-week summer courses). no make-up work submissions will be accepted. course schedule table of w eekly activities and due dates of major assignments week day topic mps 1 aug 21 - aug 28tues thurs-- project setup, os: intro, what is an os?mp1 out 2 aug 29 - sep 4tues thursarch support, os structure system calls, interrupts and exceptions on x86 mp1 due 3 sep 5 - sep 1 1tues thursmemory: intro, memory allocation paging, advanced pagingmp2 out 4 sep 12 - sep 18tues thurstlbs, paging on the x86 segmentation, beyond physical memory mp2 due 5 sep 19 - sep 25tues thursvirtual memory mechanisms, rec. pt lookup on x86 virtual memory policies imp3 out 6 sep 26 - oct 2tues thursvirtual memory policies ii threads: intro, user-level v iew, thread dispatch on x86 mp3 due 7 oct 3 - oct 9tues thursscheduling kernel vs. user threads, threads vs. eventsmp4 out 8 oct 10 - oct 16tues thursfall break midterm exam (thursday , october 12; t ime tbd) 9 oct 17 - oct 23tues thurssynchronization: intro, sw solutions to critical sections hw solutions to critical sections mp4 due 10 oct 24 -tues thursconcurrent data structures atomic t ransactionsmp5 out oct 30 11 oct 31 - nov 6tues thursi/o: intro, io management and device drivers, disks raid mp5 due 12 nov 7 - nov 13tues thursflash memory file systems: intro, file system allocationmp6 out 13 nov 14 - nov 20tues thursunix file system unix fast file system mp6 due 14 nov 21 - nov 27tues thursjournaling in file systems thanksgivingmp7 out 15 nov 28 - dec 4tues thurslog-based file systems virtualization: intro, v irtualization mechanisms 16 dec 5 - dec 1 1tues thursmemory v irtualization final exam (monda y, dec 12; time tba)mp7 due on thursday , dec 8 note: machine problems are posted on monday morning of the week where they are listed. they are due on sunday night of the week where they are listed. mp7 is due on thursday , dec 8 . in order to allow for a timely grading, the due date for mp7 is hard . note: exams will be held on-line. the midterm exam will be on october 12 and the final exam will be on december 12. because asynchronous online courses don't have a designated exam time, we will send out a survey to determine a generally acceptable slot to hold the exam(s). stay tuned... homework assignments are posted on the friday of the week where they are listed. their due date is the next thursday . quizzes are posted with the modules and are typically due on saturday of the same week. 