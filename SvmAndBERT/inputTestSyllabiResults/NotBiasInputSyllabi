 CSCE 331: Foundations of Software Engineering It is estimated that Windows XP has 50,000,000 lines of code
The average mobile phone has over 10 million lines of code
The average developer writes 10 – 20 useful lines of code per day, so a couple of engineers and 2 friends could break away, start a new company, and create a new “Windows” operating system in only about 1700 years
Up until now, most of the programs that you have been asked to write could probably fit in your mind
When you complete the letter, you fold it, seal it up, and mail it off (or hit send)
But now it is plain to see that products that you use daily simply could not be recreated by you and 10 of your best friends in an afternoon, weekend, or semester
A 1700-year project is wildly unreasonable
In this course, you will learn a better way
You will dive into the world of software engineering and hone your teamwork (and, yes, coding) skills
This course gives you very practical skills for being an effective member of a development team and producing high-quality, sustainable software
Learning these methods of working together, managing requirements, producing quality software products, and testing, delivering, and maintaining these products is every bit as valuable as coding
Why This Course is Teach this Course This course offers you a unique learning experience, and is also exciting for the instructors to teach
Here's why! • Building software is fun and rewarding You get many opportunities to “learn by doing” • There’s more to software than just coding You get a taste of software engineering • Working on teams can be messy, but it’s worth it It is amazing what you can accomplish together, so much more than on your own Course Information Course Number: 331 Course Title: Foundations of Software Engineering Credit Hours: 4 (3 Lecture Hours, 2 Lab Hours) Lecture: Face-to-Face, MWF, 9:10 am – 10:00 am, Zachry Engineering Education Complex 350 Lab: • Section 904: Face-to-Face, MW, 3:00 pm – 3:50 pm, Zachry Engineering Education Complex 598 • Section 905: Face-to-Face, MW, 4:10 pm – 5:00 pm, Zachry Engineering Education Complex 598 • Section 906: Face-to-Face, MW, 5:45 pm – 6:35 pm, Zachry Engineering Education Complex 598 Final Exam Schedule: • Sections 904 – 906: Face-to-Face, Monday December 12, 8:00 am – 10:00 am, Zachry Engineering Education Complex 350 • Section 904: Face-to-Face, Tuesday December 13, 10:30 am – 12:00 pm, Zachry Engineering Education Complex 598 • Section 905: Face-to-Face, Monday December 12, 3:30 pm – 5:30 pm, Zachry Engineering Education Complex 598 • Section 906: Face-to-Face, Friday December 9, 7:30 am – 9:30 am, Zachry Engineering Education Complex 598 Instructor Details Instructor: Paul Taele Office: 320 Peterson Phone: 979-845-7977 E-Mail: ptaele@tamu.ed
Help/Office Hours: Friday lecture sessions, email for appointment at different time Teaching Assistants Christopher Anand chrisanand@tamu.ed
Help/Office Hours: Friday lecture sessions, email for appointment at different time Senhe Hao senhehao@tamu.ed
Help/Office Hours: Friday lecture sessions, email for appointment at different time Akash Jothi akashjothi@tamu.ed
Help/Office Hours: Friday lecture sessions, email for appointment at different time Leah Tomotaki leah.tomotaki@tamu.ed
Help/Office Hours: Friday lecture sessions, email for appointment at different time Course Description Intensive programming experience that integrates core concepts in Computer Science and familiarizes with a variety of programming/development tools and techniques; students work on 2 week-long intensive projects each emphasizing a different specialization within Computer Science; focuses on programming techniques to ease code integration, reusability, and clarity
Course Learning Outcomes This course is intended to be an intensive programming experience that integrates core concepts in Computer Science and familiarizes you with a variety of programming/development tools and techniques
You will primarily work in small teams on projects emphasizing different specializations within computer science
The course focuses on honing good programming techniques to ease code integration, reuse, and clarity
The primary goal for this class is for you to emerge with strong programming skills, able to address both individual and team programming challenges competently
In this course, you will improve your programming skills through significant practice
After this course you will be able to: • Explain the need for software engineering through industry examples and personal experience • Exercise the fundamental concepts of software construction (including managing requirements, design, implementation, testing, and deployment) • Design and develop software that is clearer, more maintainable, and integrates current software technologies – some that are new to you • Collaborate and communicate effectively in small teams • Recognize and apply characteristics of effective technical writing We will cover many topics including: • Software system design for portability, performance, and testability • Coding layout and style considerations • Programming specifications and documentation • Use of basic software tools and APIs • Subject-specific topics related to the team projects (DB, HCI) Though many topics will overlap, this course is not intended to be as in-depth or comprehensive as a standard software engineering course
Textbook and/or Resource Materials Required textbooks and reading materials will be provided electronically through Perusall, which is linked in Canvas
Specific grading practices will be announced when assignments are given through assignment descriptions and assignment rubrics
Individual Project – 5%: The individual project will be completed prior to the team projects
Team Projects – 35%: Two major projects, each worth 17.5
of the course grade, for 35% total
Individual Contribution – 15%: Your individual contribution to the team projects and group assignments will be graded
In any team environment, striving to be a valuable member of your team is critical
Logged code commits, peer evaluation, attendance, participation, and instructor/TA observations will be evaluated for this grade
Written Elements – 35%: This is a writing intensive course
You will have several written assignments within the projects
Other Course Activities – 10%: The course has several different types of activities to help you better understand concepts and connect with the material
These activities bring deeper, longer-term learning as you work, either individually or with other students
For submitted assignments, grading will be based on the quality of the submitted work
For group assignments, your full participation is required to receive a grade for that assignment
Grading Scale: Grades will be assigned according to the following scale: A >= 90 > B >= 80 > C >= 70 > D >= 60 > F These grades represent varying degrees of achievement (see the university's grading system): A = excellent, B = good, C = satisfactory, D = passing, F = failing Stacked Honors Section: The stacked honors section will explore course concepts more deeply through readings, discussions, reflections, and projects
They will have honors-only lecture sessions on some Fridays during the course
Submission of Assignments: All assignments will be turned in electronically through Canvas (unless otherwise specified) by the due date and time given on the assignment
Late Work Policy Assignments turned in after the posted deadline will have a penalty applied of 5% per day late
For team assignments, the late penalty affects the grade for the entire team
We will meet approximately 2/3 of the lecture periods over the course of the semester
The honors section will meet some Fridays during the course
Below is the planned but tentative schedule of topics and major projects for the course
All assignment and project details will be communicated on Canvas
